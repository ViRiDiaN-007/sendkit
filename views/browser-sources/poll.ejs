<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: transparent;
            color: white;
            overflow: hidden;
        }

        .poll-container {
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .poll-card {
            background: linear-gradient(135deg, #1A1A2E 0%, #16213E 100%);
            border: 2px solid #3B82F6;
            border-radius: 16px;
            padding: 24px;
            max-width: 500px;
            width: 100%;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
        }

        .poll-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .poll-icon {
            width: 36px;
            height: 36px;
            background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .poll-title {
            font-size: 16px;
            font-weight: 700;
            color: #E5E7EB;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .poll-question {
            font-size: 20px;
            font-weight: 700;
            color: white;
            margin-bottom: 20px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .poll-options {
            margin-bottom: 20px;
        }

        .poll-option {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
            padding: 16px;
            background: linear-gradient(135deg, #2D1B69 0%, #1E1B4B 100%);
            border-radius: 12px;
            border: 1px solid #3B82F6;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .poll-option::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .poll-option:hover::before {
            left: 100%;
        }

        .poll-option:hover {
            background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
            border-color: #60A5FA;
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(59, 130, 246, 0.3);
        }

        .poll-option.winner {
            background: linear-gradient(135deg, #10B981 0%, #059669 100%);
            border-color: #34D399;
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(16, 185, 129, 0.4);
            animation: winnerPulse 2s ease-in-out infinite;
        }

        @keyframes winnerPulse {
            0%, 100% { transform: translateY(-2px) scale(1); }
            50% { transform: translateY(-2px) scale(1.02); }
        }

        .poll-option.tie {
            background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
            border-color: #FBBF24;
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(245, 158, 11, 0.4);
        }

        .option-number {
            width: 24px;
            height: 24px;
            background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 14px;
            margin-right: 12px;
            box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
        }

        .option-number.winner {
            background: linear-gradient(135deg, #10B981 0%, #059669 100%);
            box-shadow: 0 2px 8px rgba(16, 185, 129, 0.4);
        }

        .option-number.tie {
            background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
            box-shadow: 0 2px 8px rgba(245, 158, 11, 0.4);
        }

        .option-text {
            flex: 1;
            font-size: 16px;
            color: white;
            font-weight: 600;
        }

        .option-bar {
            width: 100px;
            height: 8px;
            background: #2D2D44;
            border-radius: 4px;
            overflow: hidden;
            margin-left: 12px;
        }

        .option-fill {
            height: 100%;
            background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
            border-radius: 4px;
            width: 0%;
            transition: width 0.5s ease;
        }

        .option-count {
            font-size: 16px;
            font-weight: 700;
            color: #FFFFFF;
            margin-left: 12px;
            min-width: 30px;
            text-shadow: 0 0 8px rgba(255, 255, 255, 0.5);
            background: rgba(0, 0, 0, 0.3);
            padding: 4px 8px;
            border-radius: 6px;
            text-align: center;
        }

        .poll-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 16px;
            border-top: 1px solid #2D2D44;
        }

        .poll-timer {
            font-size: 14px;
            font-weight: 700;
            color: #10B981;
            background: linear-gradient(135deg, #2D1B69 0%, #1E1B4B 100%);
            padding: 6px 12px;
            border-radius: 8px;
            border: 1px solid #3B82F6;
        }

        .poll-votes {
            font-size: 14px;
            color: #A78BFA;
            font-weight: 600;
        }

        .poll-status {
            display: flex;
            align-items: center;
            font-size: 12px;
            font-weight: 700;
            text-transform: uppercase;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 6px;
            background: #10B981;
            box-shadow: 0 0 8px rgba(16, 185, 129, 0.5);
        }

        .status-dot.inactive {
            background: #6B7280;
            box-shadow: 0 0 8px rgba(107, 114, 128, 0.5);
        }

        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        .spinner {
            width: 30px;
            height: 30px;
            border: 3px solid #2D2D44;
            border-top: 3px solid #3B82F6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .no-poll {
            text-align: center;
            color: #A78BFA;
            font-size: 16px;
            padding: 48px 24px;
            font-weight: 600;
        }

        .poll-option.winner {
            background: linear-gradient(135deg, #10B981 0%, #059669 100%);
            border: 2px solid #10B981;
            box-shadow: 0 0 20px rgba(16, 185, 129, 0.3);
        }

        .poll-option.winner .option-text {
            color: #FFFFFF;
            font-weight: 700;
        }

        .poll-option.winner .option-count {
            background: rgba(255, 255, 255, 0.2);
            color: #FFFFFF;
        }

        .poll-option.tie {
            background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
            border: 2px solid #F59E0B;
            box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);
        }

        .poll-option.tie .option-text {
            color: #FFFFFF;
            font-weight: 700;
        }

        .poll-option.tie .option-count {
            background: rgba(255, 255, 255, 0.2);
            color: #FFFFFF;
        }
    </style>
</head>
<body>
    <div class="poll-container" id="poll-container" style="display: none;">
        <div id="loading" class="loading">
            <div class="spinner"></div>
        </div>
        
        <div id="poll-card" class="poll-card">
            <div class="poll-header">
                <div class="poll-icon">
                    <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                    </svg>
                </div>
                <div class="poll-title">Live Poll</div>
            </div>
            
            <div id="poll-content">
                <div class="no-poll">
                    Waiting for poll to start...
                </div>
            </div>
        </div>
    </div>

    <script>
        const streamerId = '<%= streamerId %>';
        const pollCard = document.getElementById('poll-card');
        const pollContent = document.getElementById('poll-content');
        const loading = document.getElementById('loading');
        
        let currentPoll = null;
        let pollInterval = null;

        // Connect to Socket.IO
        const socket = io();
        
        socket.on('connect', () => {
            console.log('Connected to poll service');
            console.log('Joining streamer room:', streamerId);
            socket.emit('join-streamer', streamerId);
            loading.style.display = 'none';
            pollCard.classList.add('active');
            
            // Check for existing poll
            checkForActivePoll();
        });

        socket.on('disconnect', () => {
            console.log('Disconnected from poll service');
            loading.style.display = 'flex';
            pollCard.classList.remove('active');
        });

        // Fallback timeout - if no connection after 5 seconds, show no poll
        setTimeout(() => {
            if (loading.style.display !== 'none') {
                console.log('Connection timeout, showing no poll state');
                loading.style.display = 'none';
                pollCard.classList.add('active');
                showNoPoll();
            }
        }, 5000);

        socket.on('browser-source-message', (data) => {
            console.log('Received poll message:', data);
            console.log('Message type:', data.type);
            console.log('Poll data:', data.poll);
            
            if (data.type === 'poll-start') {
                console.log('Starting poll:', data.poll);
                showPoll(data.poll);
            } else if (data.type === 'poll-update') {
                console.log('Updating poll:', data.poll);
                updatePoll(data.poll);
            } else if (data.type === 'poll-end') {
                console.log('Ending poll:', data.results);
                endPoll(data.results);
            }
        });

        // Add debugging for Socket.IO events
        socket.on('connect', () => {
            console.log('Socket connected, joining room:', streamerId);
        });

        socket.on('disconnect', () => {
            console.log('Socket disconnected');
        });

        socket.on('error', (error) => {
            console.error('Socket error:', error);
        });

        function checkForActivePoll() {
            // Fetch current poll status from API
            fetch(`/api/browser-source/poll/${streamerId}/data`)
                .then(response => response.json())
                .then(data => {
                    if (data.activePoll) {
                        showPoll(data.activePoll);
                    } else {
                        showNoPoll();
                    }
                })
                .catch(error => {
                    console.error('Error fetching poll data:', error);
                    showNoPoll();
                });
        }

        function showNoPoll() {
            // Hide the entire poll container when there's no active poll
            document.getElementById('poll-container').style.display = 'none';
        }

        function showPoll(poll) {
            // Show the poll container when a poll starts
            document.getElementById('poll-container').style.display = 'flex';
            
            currentPoll = poll;
            renderPoll(poll);
            pollCard.classList.add('active');
            
            // Start timer
            if (pollInterval) clearInterval(pollInterval);
            pollInterval = setInterval(() => {
                updateTimer();
            }, 1000);
        }

        function updatePoll(poll) {
            currentPoll = poll;
            renderPoll(poll);
        }

        function endPoll(results) {
            if (pollInterval) {
                clearInterval(pollInterval);
                pollInterval = null;
            }
            
            renderResults(results);
            
            // Hide the poll container after 8 seconds to show results
            setTimeout(() => {
                document.getElementById('poll-container').style.display = 'none';
            }, 8000);
        }

        function renderPoll(poll) {
            const maxVotes = Math.max(...poll.options.map(opt => opt.count || 0));
            const winners = poll.options.filter(opt => opt.count === maxVotes && maxVotes > 0);
            const isTie = winners.length > 1;
            
            pollContent.innerHTML = `
                <div class="poll-question">${poll.question}</div>
                <div class="poll-options">
                    ${poll.options.map((option, index) => {
                        const isWinner = option.count === maxVotes && maxVotes > 0;
                        const optionClass = isWinner ? (isTie ? 'tie' : 'winner') : '';
                        const numberClass = isWinner ? (isTie ? 'tie' : 'winner') : '';
                        
                        return `
                        <div class="poll-option ${optionClass}">
                            <div class="option-number ${numberClass}">${option.number}</div>
                            <div class="option-text">${option.text}</div>
                            <div class="option-bar">
                                <div class="option-fill" style="width: ${maxVotes > 0 ? (option.count / maxVotes) * 100 : 0}%"></div>
                            </div>
                            <div class="option-count">${option.count || 0}</div>
                        </div>
                        `;
                    }).join('')}
                </div>
                <div class="poll-footer">
                    <div class="poll-status">
                        <div class="status-dot"></div>
                        <span>Live</span>
                    </div>
                    <div class="poll-timer" id="timer">Voting ends in: <span id="time-left">--</span>s</div>
                    <div class="poll-votes">${poll.totalVotes || 0} votes</div>
                </div>
            `;
        }

        function renderResults(results) {
            const maxVotes = Math.max(...currentPoll.options.map(opt => opt.count || 0));
            const winners = currentPoll.options.filter(opt => opt.count === maxVotes && maxVotes > 0);
            const isTie = winners.length > 1;
            
            pollContent.innerHTML = `
                <div class="poll-question">${currentPoll.question}</div>
                <div class="poll-options">
                    ${currentPoll.options.map((option, index) => {
                        const isWinner = option.count === maxVotes && maxVotes > 0;
                        const optionClass = isWinner ? (isTie ? 'tie' : 'winner') : '';
                        const numberClass = isWinner ? (isTie ? 'tie' : 'winner') : '';
                        
                        return `
                        <div class="poll-option ${optionClass}">
                            <div class="option-number ${numberClass}">${option.number}</div>
                            <div class="option-text">${option.text}</div>
                            <div class="option-bar">
                                <div class="option-fill" style="width: ${option.count > 0 ? (option.count / maxVotes) * 100 : 0}%"></div>
                            </div>
                            <div class="option-count">${option.count || 0}</div>
                        </div>
                        `;
                    }).join('')}
                </div>
                <div class="poll-footer">
                    <div class="poll-status">
                        <div class="status-dot inactive"></div>
                        <span>Ended</span>
                    </div>
                    ${isTie ? 
                        `<div class="tie">TIE! ${winners.map(w => `${w.number} - ${w.text}`).join(' & ')}</div>` : 
                        winners.length > 0 ? 
                            `<div class="winner">Winner: ${winners[0].number} - ${winners[0].text}</div>` : 
                            '<div class="tie">No votes cast</div>'
                    }
                    <div class="poll-votes">${currentPoll.totalVotes || 0} votes</div>
                </div>
            `;
        }

        function updateTimer() {
            if (!currentPoll || !currentPoll.endsAt) return;
            
            const now = Date.now();
            const timeLeft = Math.max(0, Math.ceil((currentPoll.endsAt - now) / 1000));
            
            const timerElement = document.getElementById('time-left');
            if (timerElement) {
                timerElement.textContent = timeLeft;
            }
            
            if (timeLeft <= 0 && pollInterval) {
                clearInterval(pollInterval);
                pollInterval = null;
            }
        }

        // Test function for development
        function testPoll() {
            const testPoll = {
                question: "What's your favorite streaming feature?",
                options: [
                    { number: 1, text: "TTS", count: 15 },
                    { number: 2, text: "Polls", count: 23 },
                    { number: 3, text: "Automod", count: 8 }
                ],
                totalVotes: 46,
                endsAt: Date.now() + 30000
            };
            
            showPoll(testPoll);
        }

        // Expose test function globally for debugging
        window.testPoll = testPoll;
    </script>

    <!-- Socket.IO client -->
    <script src="/socket.io/socket.io.js"></script>
</body>
</html>
